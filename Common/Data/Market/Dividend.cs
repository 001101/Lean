/*
 * QUANTCONNECT.COM - Democratizing Finance, Empowering Individuals.
 * Lean Algorithmic Trading Engine v2.0. Copyright 2014 QuantConnect Corporation.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*/

using System;
using System.Globalization;

namespace QuantConnect.Data.Market
{
    /// <summary>
    /// Dividend event from a security
    /// </summary>
    public class Dividend : BaseData
    {
        /// <summary>
        /// Gets the dividend payment
        /// </summary>
        public decimal Distribution
        {
            get { return Value; } 
            set { Value = value; }
        }

        /// <summary>
        /// Reader converts each line of the data source into BaseData objects. Each data type creates its own factory method, and returns a new instance of the object 
        /// each time it is called. 
        /// </summary>
        /// <param name="config">Subscription data config setup object</param>
        /// <param name="line">Line of the source document</param>
        /// <param name="date">Date of the requested data</param>
        /// <param name="datafeed">Type of datafeed we're requesting - a live or backtest feed.</param>
        /// <returns>Instance of the T:BaseData object generated by this line of the CSV</returns>
        public override BaseData Reader(SubscriptionDataConfig config, string line, DateTime date, DataFeedEndpoint datafeed)
        {
            var dividend = new Dividend {Symbol = config.Symbol};
            switch (datafeed)
            {
                // these are the only supported feeds at the moment
                case DataFeedEndpoint.Backtesting:
                case DataFeedEndpoint.FileSystem:
                    // format : "date_i, factor_i, factor_i+1, close_i"
                    var csv = line.Split(',');
                    Time = DateTime.ParseExact(csv[0], DateFormat.EightCharacter, CultureInfo.InvariantCulture);
                    var factori = csv[1].ToDecimal();
                    var factori_1 = csv[2].ToDecimal();
                    var closei = csv[3].ToDecimal();
                    Distribution = closei - (closei*factori/factori_1);
                    break;
                
                case DataFeedEndpoint.LiveTrading:
                case DataFeedEndpoint.Database:
                    break;

                default:
                    throw new ArgumentOutOfRangeException("datafeed");
            }

            return dividend;
        }

        /// <summary>
        /// Return the URL string source of the file. This will be converted to a stream 
        /// </summary>
        /// <param name="datafeed">Type of datafeed we're reqesting - backtest or live</param>
        /// <param name="config">Configuration object</param>
        /// <param name="date">Date of this source file</param>
        /// <returns>String URL of source file.</returns>
        public override string GetSource(SubscriptionDataConfig config, DateTime date, DataFeedEndpoint datafeed)
        {
            return Constants.DataFolder + @"/equity/factor_files/" + config.Symbol + ".csv";
        }
    }
}
